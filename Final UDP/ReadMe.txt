"sensor.c": It uses the 'rand()' function call to continuously write any random integers to a file name 'sensor.txt'. Note that this file writes the integers in binary form so it may be possible that if you open 'sesnor.txt' you may see meaningless characters.

"server.c": The main objective of this code is to read the integers from 'sensor.txt' (which is continuously being written) and broadcast it to a particular network (here it is 10.28.4). Note that before broadcasting it is mandatory to set socket options accordingly. As we just need to send the data but not receive anything it is not required to bind the server socket to any address. Another important function that server does is, it includes a client identifier integer with the broadcast data so that the client knows which data is to be received and which is to be left. If the number of clients/sensors receiving the data increases/decreases, change the value of 'TOTALSENSORS' accordingly. In this particular code the server reads 1024 (float) numbers and adds a integer identifier to it before sending it in broadcast. Also note that the broadcast data is being sent at port 11000 so it is required by the clients to bind to this port with and network address.

"client.c": The main objective of the client code is to receive the data that is sent by the broadcast server and before any further processing check wether the identifier associated with the received packet matches the client identifier and if yes, calculate the Fast Fourier Transform(FFT) of the received number then send it to the output node(si_node). Note that the client socket must be bound to the same port (11000) through which the broadcast data is being sent. Don't forget to include the 'complex.h' and 'fftw3.h' header files as it will be calculating the FFT of the received numbers. While compiling don't forget to link it with '-lfftw3 -lm'. Note that you should first populate the address and port of the output node before sending the packets. The received packet will contain only a integer as the function 'rand()' returns only an integer, so to convert it to a random float number we have multiplied it with 0.1, 0.01,0.001... followed by adding the products. If the address of the output node is changed due to any reason don't forget to make the same changes in the client code as well. We can create multiple clients and make it receive the data with only a particular identifier and all this clients must send the calculated FFT's to the output node. Note that, no matter how many clients you make always remember to bind it to the same port on which broadcast is being sent (11000). 

"output_node.c": The main objective of the output node is to receive the calculated FFT sent by various clients and print it continuously on the screen meanwhile writing all this data to a output file that is in this case 'Node.txt'. Note that output node should not be bound to the same port over which broadcast is being done (here 11000), it can be bound to any other port(here 8888) and all the clients must send there processed data to this address and port. Since the output node is in a infinite while loop, once it is executed it is always ready to receive the data from the clients unless it is terminated through the console (ctrl+c). As stated earlier if you try to open the text file 'Node.txt' you may see meaningless characters as the output node writes the data in binary format. Don't forget to include the 'complex.h' and 'fftw3.h' header files as we will be assigning memory for 'out' array(which is of type double[2]) which will receive the calculated FFT's sent by the clients. 
